SET DATABASE UNIQUE NAME HSQLDB32815F7909
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL TRANSLATE TTI TYPES TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL DOUBLE NAN TRUE
SET DATABASE SQL LONGVAR IS LOB FALSE
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON DEADLOCK TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 8
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
CREATE SCHEMA AGENTSPRING_FACE AUTHORIZATION DBA
SET SCHEMA AGENTSPRING_FACE
CREATE MEMORY TABLE AGENTSPRING_FACE.SOURCES(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,TITLE VARCHAR(45) DEFAULT NULL,START VARCHAR(45) DEFAULT NULL,SCRIPT VARCHAR(16777216) NOT NULL)
ALTER TABLE AGENTSPRING_FACE.SOURCES ALTER COLUMN ID RESTART WITH 73
CREATE MEMORY TABLE AGENTSPRING_FACE.VISUALS(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,TITLE VARCHAR(45) DEFAULT NULL,CLASS VARCHAR(45) DEFAULT NULL,TYPE VARCHAR(45) DEFAULT NULL,YAXIS VARCHAR(45) DEFAULT NULL)
ALTER TABLE AGENTSPRING_FACE.VISUALS ALTER COLUMN ID RESTART WITH 41
CREATE MEMORY TABLE AGENTSPRING_FACE.VISUALS_SOURCES(VISUAL INTEGER NOT NULL,SOURCE INTEGER NOT NULL,PRIMARY KEY(VISUAL,SOURCE),FOREIGN KEY(VISUAL) REFERENCES AGENTSPRING_FACE.VISUALS(ID) ON DELETE CASCADE,FOREIGN KEY(SOURCE) REFERENCES AGENTSPRING_FACE.SOURCES(ID))
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
SET SCHEMA AGENTSPRING_FACE
INSERT INTO SOURCES VALUES(0,'Producer Cash','EnergyProducer','[v.name, v.cash]')
INSERT INTO SOURCES VALUES(1,'Operational Capacity (Country)','Zone','[v.name + &quot;&#39;s Supply&quot;, v.in(&quot;REGION&quot;).in(&quot;LOCATION&quot;).filter{(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick)}.sum{it.actualNominalCapacity}]')
INSERT INTO SOURCES VALUES(2,'VWAP of Power','Zone','cp = v.in(&quot;ZONE&quot;).in(&quot;MARKET_POINT&quot;).filter{it.time==tick &amp; it.forecast==false}.toList();\u000a[v.name, cp.sum{it.price * it.volume} / cp.sum{it.volume}];')
INSERT INTO SOURCES VALUES(3,'Generation Type (operational )','PowerGeneratingTechnology','[v.name, v.in().filter{(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick)}.sum{it.actualNominalCapacity}]')
INSERT INTO SOURCES VALUES(4,'CO2 Tax','Government','price = v.out(&quot;CO2TAX_TREND&quot;).collect{f.getTrendValue(it, tick)}[0];\u000areturn [&quot;CO2 Tax&quot;, price];')
INSERT INTO SOURCES VALUES(5,'CO2 Cap','Government','try{cap = v.out(&quot;CO2CAP_TREND&quot;).collect{f.getTrendValue(it, tick)}[0];} catch(Exception e){    \u000acap=v.out(&quot;CO2CAP_TREND&quot;).timeSeries.next()[tick.toInteger()]}\u000areturn [&quot;CO2 cap&quot;, cap]\u000atick.toInteger()')
INSERT INTO SOURCES VALUES(6,'Revenue and Profit','','flows = n.getNodes(&#39;CashFlow&#39;);\u000agroups = flows.groupBy{it.type}\u000aresult = [];\u000atotalCosts = 0;\u000atotalRevenue = 0;\u000atotalSpotRevenue = 0;\u000atotalLTCRevenue = 0;\u000atotalCMRevenue = 0;\u000atotalCO2HedgingRevenue=0;\u000afor (key in groups.keySet()) {\u000a    if (key&lt;3) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0]) {\u000a                totalRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    } else {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;FROM_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0]) {\u000a                totalCosts += flow.money;\u000a            }\u000a        }\u000a    }\u000a       \u000a     if (key==1) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0]) {\u000a                totalSpotRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    }\u000a    \u000a     if (key==2) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0]) {\u000a                totalLTCRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    }\u000a    \u000a             if (key==11) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0]) {\u000a                totalCMRevenue += flow.money;\u000a            }\u000a        }\u000a}\u000aif (key==12) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0]) {\u000a                totalCO2HedgingRevenue += flow.money;\u000a            }\u000a        }\u000a}\u000a}\u000a//result.add([&#39;Revenue&#39;, totalRevenue]);\u000aresult.add([&#39;Revenue LTC&#39;, totalLTCRevenue]);\u000aresult.add([&#39;Revenue Spot&#39;, totalSpotRevenue]);\u000aresult.add([&#39;Profit&#39;, totalRevenue - totalCosts]);\u000aresult.add([&#39;Revenue CM&#39;, totalCMRevenue]);\u000aresult.add([&#39;Revenue CO2Hedge&#39;, totalCO2HedgingRevenue]);\u000a\u000areturn result;')
INSERT INTO SOURCES VALUES(7,'CO2 Emissions','DecarbonizationModel','ppdps=g.idx(&#39;__types__&#39;)[[className:&#39;emlab.gen.domain.market.electricity.PowerPlantDispatchPlan&#39;]].propertyFilter(&#39;time&#39;, FilterPipe.Filter.EQUAL, tick).filter{it.status&gt;=1 &amp;&amp; it.forecast==false}.collect();\u000aco2Emissions = 0\u000afor(plan in ppdps){\u000afuelMix=plan.out(&#39;POWERPLANT_DISPATCHPLAN&#39;).out(&#39;FUEL_MIX&#39;).collect()\u000asingleEmission=0\u000a    for(fuelMixElement in fuelMix){\u000a        //fuelMixElement=fuelMix[1]\u000a        share=fuelMixElement.share\u000a        co2Density=fuelMixElement.out(&quot;SUBSTANCE&quot;).collect{it.co2Density}[0]*(1-plan.out(&#39;POWERPLANT_DISPATCHPLAN&#39;).out(&quot;TECHNOLOGY&quot;).collect{it.co2CaptureEffciency}[0])\u000a        singleEmission+=share*co2Density\u000a    }\u000a    co2Emissions+=plan.acceptedAmount*singleEmission*plan.out(&#39;SEGMENT_DISPATCHPLAN&#39;).collect{it.lengthInHours}[0]\u000a}\u000areturn [&#39;CO2 emissions&#39;, co2Emissions];')
INSERT INTO SOURCES VALUES(8,'Peak Power Demand','','results = [];\u000ademandFactor = n.getNodes(&quot;DecarbonizationModel&quot;)[0].out(&quot;DEMANDGROWTH_TREND&quot;).collect{f.getTrendValue(it, tick)}[0];\u000afor(node in n.getNodes(&quot;SegmentLoad&quot;)){\u000a   if(node.in().name == &quot;Country A&#39;s electricity spot market&quot;){\u000a      results.add([&quot;demand&quot;, node.baseLoad]);    \u000a   }\u000a}\u000areturn results;\u000a\u000a//totalLoad = n.getNodes(&quot;SegmentLoad&quot;).max{it.baseLoad}.baseLoad;\u000a//}\u000a//[[&quot;Demand&quot;, totalLoad * demandFactor]];')
INSERT INTO SOURCES VALUES(9,'Costs','','flows = n.getNodes(&quot;CashFlow&quot;);\u000agroups = flows.groupBy{it.type}\u000aresult = [];\u000afor (key in groups.keySet()) {\u000a    sum = 0;\u000a    for (flow in groups[key]) {\u000a        if (flow.time != tick) continue;\u000a        if (flow.out(&quot;FROM_AGENT&quot;).collect{it.__type__.contains(&quot;EnergyProducer&quot;)}[0]) {\u000a            sum += flow.money;\u000a        }\u000a    }\u000a    name=&quot;Unspecified&quot;;\u000a    if(key==0){name=&quot;Unclassified&quot;;}\u000a    if(key==1){name=&quot;Electricity spot&quot;;}\u000a    if(key==2){name=&quot;Electricity ltc&quot;;}\u000a    if(key==3){name=&quot;Fixed O&amp;M&quot;;}\u000a    if(key==4){name=&quot;Commodity&quot;;}\u000a    if(key==5){name=&quot;CO2 tax&quot;;}\u000a    if(key==6){name=&quot;CO2 auction&quot;;}\u000a    if(key==7){name=&quot;Loan&quot;;}\u000a    if(key==8){name=&quot;Downpayment&quot;;}\u000a    if(key==9){name=&quot;National CO2 MinPrice&quot;;}\u000a    if(key==12){name=&quot;CO2 Hedging&quot;;}\u000a    result.add([name, sum]);\u000a}\u000areturn result;')
INSERT INTO SOURCES VALUES(10,'CO2 Auction','CO2Auction','point=v.in(&#39;MARKET_POINT&#39;).filter{it.time==tick &amp; it.forecast==false}\u000aif(!point.hasNext()){price = 0} else {price=point.next().getProperty(&#39;price&#39;)}\u000a[&quot;CO2 auction price&quot;, price]')
INSERT INTO SOURCES VALUES(11,'National CO2 Price floors','NationalGovernment','price = v.out(&#39;MINCO2PRICE_TREND&#39;).collect{f.getTrendValue(it, tick)}[0];\u000areturn [&#39;CO2 price floor in &#39; + v.out(&#39;GOVERNED_ZONE&#39;).collect{it.name}, price];')
INSERT INTO SOURCES VALUES(12,'Power prices country A','','result = [];\u000azones = n.getNodes(&quot;Zone&quot;);\u000afor(zone in zones){\u000a    if(zone.name == &quot;Country A&quot;){\u000a        theones = zone.in.in(&quot;MARKET_POINT&quot;).filter{it.time == tick &amp;&amp; it.forecast==false}\u000a        for(one in theones) {\u000a          result.add([one.out(&quot;SEGMENT_POINT&quot;).segmentID,one.price]);\u000a        }\u000a    }\u000a}\u000areturn result;')
INSERT INTO SOURCES VALUES(13,'Power prices country B','','result = [];\u000azones = n.getNodes(&quot;Zone&quot;);\u000afor(zone in zones){\u000a    if(zone.name == &quot;Country B&quot;){\u000a        theones = zone.in.in(&quot;MARKET_POINT&quot;).filter{it.time == tick &amp; it.forecast==false}\u000a        for(one in theones) {\u000a          result.add([one.out(&quot;SEGMENT_POINT&quot;).segmentID,one.price]);\u000a        }\u000a    }\u000a}\u000areturn result;')
INSERT INTO SOURCES VALUES(14,'Operational Capacity (Owner)','EnergyProducer','[v.name + &quot; (operational)&quot;,v.in(&quot;POWERPLANT_OWNER&quot;).filter{(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick)}.sum{it.actualNominalCapacity}]')
INSERT INTO SOURCES VALUES(15,'Fuel prices','Substance','if(v.name != &#39;Electricity&#39; &amp;&amp; v.name != &#39;CO2&#39;){\u000a      price = v.in(&#39;SUBSTANCE_MARKET&#39;).in(&#39;MARKET_POINT&#39;).filter{it.time == tick}.collect{it.price};\u000a      density = v.energyDensity;\u000a      inGJ = price[0] / density * 1000;\u000a      return [v.name,inGJ];\u000a}')
INSERT INTO SOURCES VALUES(17,'Pipeline Capacity (Owner)','EnergyProducer','[v.name + &quot; (pipeline)&quot;,v.in(&quot;POWERPLANT_OWNER&quot;).filter{(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &gt; tick)}.sum{it.actualNominalCapacity}]')
INSERT INTO SOURCES VALUES(18,'Generation Type (pipeline)','PowerGeneratingTechnology','capacity = v.in(&#39;TECHNOLOGY&#39;).filter{!((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick) &amp;&amp; (it.dismantleTime &gt; tick)}.sum{it.actualNominalCapacity}\u000aif(capacity == null) capacity=0\u000a[v.name + &quot; (pipeline)&quot;, capacity]')
INSERT INTO SOURCES VALUES(19,'Pipeline Capacity (Country)','Zone','[v.name + &quot; (pipeline)&quot;, v.in(&quot;REGION&quot;).in(&quot;LOCATION&quot;).filter{!(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick)}.sum{it.actualNominalCapacity}]')
INSERT INTO SOURCES VALUES(20,'Long-term contracts (producer)','EnergyProducer','capacity = v.in(&quot;CONTRACT_FROM&quot;).filter{f.ltcIsActive(it, tick)}.sum{it.capacity}\u000aif(capacity == null) capacity = 0;\u000a[v.name, capacity]')
INSERT INTO SOURCES VALUES(21,'Long-term contracts (type)','LongTermContractType','capacity = v.in(&quot;LONGTERMCONTRACT_TYPE&quot;).filter{f.ltcIsActive(it, tick)}.sum{it.capacity}\u000aif(capacity == null) capacity = 0\u000a[v.name, capacity]')
INSERT INTO SOURCES VALUES(22,'Long-term contracts (duration)','LongTermContractDuration','capacity = v.in(&quot;LONGTERMCONTRACT_DURATION&quot;).filter{f.ltcIsActive(it, tick)}.sum{it.capacity}\u000aif(capacity == null) capacity = 0;\u000a[v.duration, capacity]')
INSERT INTO SOURCES VALUES(23,'Long-term contracts (country)','','result = [];\u000azones = n.getNodes(&quot;Zone&quot;);\u000afor(zone in zones){\u000a    capacity = zone.in(&quot;LONGTERMCONTRACT_ZONE&quot;).filter{f.ltcIsActive(it, tick)}.sum{it.capacity}\u000a    if(capacity == null) capacity = 0;\u000a    result.add([zone.name,capacity]);\u000a}\u000areturn result;')
INSERT INTO SOURCES VALUES(24,'Demand growth factors','ElectricitySpotMarket','return([v.name,v.out(&quot;DEMANDGROWTH_TREND&quot;).previousValues])')
INSERT INTO SOURCES VALUES(25,'Generation Type (Peak Effective)','PowerGeneratingTechnology','t = new Table();\u000av.in().filter{(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick)}.as(&#39;powerPlantCapacity&#39;).out(&#39;TECHNOLOGY&#39;).as(&#39;peakSegmentDependentAvailability&#39;).table(t){it.actualNominalCapacity}{it.peakSegmentDependentAvailability}.cap().next();\u000acapacitySum = 0; for (row in t){capacitySum += row.getColumn(&#39;powerPlantCapacity&#39;) * row.getColumn(&#39;peakSegmentDependentAvailability&#39;);}; \u000a\u000a[v.name, capacitySum]')
INSERT INTO SOURCES VALUES(26,'Demand','ElectricitySpotMarket','topsegments = v.out(&quot;SEGMENT_LOAD&quot;).max{it.baseLoad}.baseLoad\u000atry{growthfactors = v.out(&quot;DEMANDGROWTH_TREND&quot;).collect{f.getTrendValue(it, tick)}[0];} catch(Exception e){    \u000agrowthfactors=v.out(&quot;DEMANDGROWTH_TREND&quot;).timeSeries.next()[tick.toInteger()]}\u000aadjustedTopSegments = topsegments*growthfactors;\u000a//v.outE(&quot;ZONE&quot;).inV.name\u000areturn[v.outE(&quot;ZONE&quot;).inV.collect{it.name + &quot;&#39;s Peak Demand&quot;}, adjustedTopSegments]')
INSERT INTO SOURCES VALUES(29,'ShortagesInHours','','powerplants = g.idx(&#39;__types__&#39;)[[className:&#39;emlab.gen.domain.technology.PowerPlant&#39;]]\u000aproduction= powerplants.in(&#39;POWERPLANT_DISPATCHPLAN&#39;).sum{f.determineProductionOfDispatchPlanInMWh(it, tick)};\u000asegmentloads = g.idx(&#39;__types__&#39;)[[className:&#39;emlab.gen.domain.market.electricity.SegmentLoad&#39;]]\u000aproductionsum  = 0;\u000afor(segmentload in segmentloads){\u000a    //productionsum += segmentload.baseLoad;\u000a    growthfactor = segmentload.in(&#39;SEGMENT_LOAD&#39;).out(&#39;DEMANDGROWTH_TREND&#39;).collect{f.getTrendValue(it, tick)}[0];\u000a    productionsum += segmentload.out(&#39;SEGMENTLOAD_SEGMENT&#39;).lengthInHours.next() * segmentload.baseLoad * growthfactor;\u000a}\u000areturn [[&#39;ShortagesinHours&#39;, (production-productionsum)/productionsum*8760 ]];')
INSERT INTO SOURCES VALUES(30,'CO2 Price Floor','Government','price = v.out(&#39;MINCO2PRICE_TREND&#39;).collect{f.getTrendValue(it, tick)}[0];\u000areturn [&#39;EU CO2 price floor&#39;, price];')
INSERT INTO SOURCES VALUES(31,'Generation Type (Country A)','PowerGeneratingTechnology','capacity = v.in(&#39;TECHNOLOGY&#39;).as(&#39;x&#39;).out(&#39;LOCATION&#39;).out(&#39;REGION&#39;).filter{it.name==&quot;Country A&quot;}.back(&#39;x&#39;).filter{(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick)}.sum{it.actualNominalCapacity}\u000aif(capacity == null) capacity = 0\u000a[v.name + &quot; (A)&quot;, capacity]')
INSERT INTO SOURCES VALUES(32,'Generation Type (Country B)','PowerGeneratingTechnology','capacity = v.in(&#39;TECHNOLOGY&#39;).as(&#39;x&#39;).out(&#39;LOCATION&#39;).out(&#39;REGION&#39;).filter{it.name==&quot;Country B&quot;}.back(&#39;x&#39;).filter{(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick)}.sum{it.actualNominalCapacity}\u000aif(capacity == null) capacity = 0\u000a[v.name + &quot; (B)&quot;, capacity]')
INSERT INTO SOURCES VALUES(33,'TotalConsumption','','segmentloads = g.idx(&#39;__types__&#39;)[[className:&#39;emlab.gen.domain.market.electricity.SegmentLoad&#39;]];\u000aproductionsum  = 0;\u000afor(segmentload in segmentloads){\u000a    //productionsum += segmentload.baseLoad;\u000a    growthfactor = segmentload.in(&#39;SEGMENT_LOAD&#39;).out(&#39;DEMANDGROWTH_TREND&#39;).collect{f.getTrendValue(it, tick)}[0];\u000a    productionsum += segmentload.out(&#39;SEGMENTLOAD_SEGMENT&#39;).lengthInHours.next() * segmentload.baseLoad * growthfactor;\u000a}\u000areturn [[&#39;Total Consumption&#39;, productionsum]];\u000a//\u000a//adjustedTopSegments = topsegments*growthfactors;\u000a//v.outE(&quot;ZONE&quot;).inV.name\u000a//return[v.outE(&quot;ZONE&quot;).inV.collect{it.name + &quot;&#39;s Peak Demand&quot;}, adjustedTopSegments]')
INSERT INTO SOURCES VALUES(34,'Production per Technology','PowerGeneratingTechnology','[v.name, v.in().in(&quot;POWERPLANT_DISPATCHPLAN&quot;).filter{it.forecast==&quot;false&quot;}.sum{f.determineProductionOfDispatchPlanInMWh(it, tick)}]')
INSERT INTO SOURCES VALUES(35,'TotalProductionAlt','PowerGeneratingTechnology','sum = 0;\u000appdps = v.in(&quot;TECHNOLOGY&quot;).in(&quot;POWERPLANT_DISPATCHPLAN&quot;).filter{it.time==1 &amp;&amp; it.status&gt;=2};\u000afor(ppdp in ppdps){\u000a    totalAmount = ppdp.getProperty(&quot;acceptedAmount&quot;) + ppdp.getProperty(&quot;capacityLongTermContract&quot;);\u000a    hoursInSegment = ppdp.out(&quot;SEGMENT_DISPATCHPLAN&quot;).next().getProperty(&quot;lengthInHours&quot;);;\u000a    production = totalAmount * hoursInSegment;\u000a    sum = sum + production;\u000a}\u000areturn [v.name, sum]')
INSERT INTO SOURCES VALUES(36,'TotalProduction','','powerplants = g.idx(&#39;__types__&#39;)[[className:&#39;emlab.gen.domain.technology.PowerPlant&#39;]]\u000aproduction= powerplants.in(&#39;POWERPLANT_DISPATCHPLAN&#39;).sum{f.determineProductionOfDispatchPlanInMWh(it, tick)};\u000areturn[[&#39;TotalProduction&#39;, production]]')
INSERT INTO SOURCES VALUES(37,'NumberOfVertices','','[[&quot;Vertices&quot;, g.V.count()]]')
INSERT INTO SOURCES VALUES(38,'NumberOfEdges','','[[&quot;Edges&quot;, g.E.count()]]')
INSERT INTO SOURCES VALUES(39,'Peak Load','ElectricitySpotMarket','//segmentloads = g.idx(&quot;__types__&quot;)[[className:&#39;emlab.domain.market.electricity.ElectricitySpotMarket&#39;]];\u000a//v.outE\u000asegmentloads = v.out(&quot;SEGMENT_LOAD&quot;);\u000a\u000asumofLoads  = 0;\u000acounter = 0;\u000afor(segmentload in segmentloads){\u000a    growthfactor = segmentload.in(&#39;SEGMENT_LOAD&#39;).out(&#39;DEMANDGROWTH_TREND&#39;).collect{f.getTrendValue(it, tick)}[0];\u000a    \u000a    if (sumofLoads &lt; segmentload.baseLoad) {\u000a        sumofLoads = segmentload.baseLoad\u000a    }\u000a    adjustedsum = sumofLoads*growthfactor;\u000a    counter += 1;\u000a}\u000a\u000a// averageLoad = adjustedsum/counter \u000areturn[adjustedsum]')
INSERT INTO SOURCES VALUES(40,'Zone baseload','Zone','//v.in(&#39;ZONE&#39;).filter{it.__type__==&#39;emlab.domain.market.electricity.ElectricitySpotMarket&#39;}.outE(&quot;SEGMENT_LOAD&quot;).inV.max{it.baseLoad}\u000a//v.out(&#39;BIDDER&#39;).filter{it.time == tick}\u000a//v.out(&#39;BIDDER&#39;).filter{it.time == tick}.sum{it.acceptedAmount}\u000a//v.in(&#39;ZONE&#39;).filter{it.__type__==&#39;emlab.domain.market.electricity.ElectricitySpotMarket&#39;}.next()')
INSERT INTO SOURCES VALUES(41,'Descending','ElectricitySpotMarket','//v.in(&quot;BIDDINGMARKET&quot;).filter{it.time==tick}._()\u000av.in(&quot;BIDDINGMARKET&quot;).filter{it.time==tick}.sort{-it.price}_().out(&quot;SEGMENT_DISPATCHPLAN&quot;).filter{it.segmentID==3}')
INSERT INTO SOURCES VALUES(42,'SR Operator Cash','StrategicReserveOperator','[v.name, v.cash]')
INSERT INTO SOURCES VALUES(43,'SRFraction of Total Generation','ElectricitySpotMarket','//[v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==0}.outE(&quot;SEGMENT_DISPATCHPLAN&quot;).inV.lengthInHours, v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==0}.acceptedAmount]\u000asum=0;\u000asum1=0;\u000appdps = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==tick};\u000a\u000afor (ppdp in ppdps){\u000a    totalAmount = ppdp.getProperty(&quot;acceptedAmount&quot;);\u000a    hoursInSegment = ppdp.out(&quot;SEGMENT_DISPATCHPLAN&quot;).next().getProperty(&quot;lengthInHours&quot;);\u000a    production = totalAmount * hoursInSegment;\u000a    sum = sum + production;\u000a}   \u000a    \u000appdpss = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.status&gt;=2 &amp;&amp; it.time==tick};   \u000afor(pppdp in ppdpss){\u000a    totalAmount1 = pppdp.getProperty(&quot;acceptedAmount&quot;);\u000a    hoursInSegment1 = pppdp.out(&quot;SEGMENT_DISPATCHPLAN&quot;).next().getProperty(&quot;lengthInHours&quot;);\u000a    production1 = totalAmount1 * hoursInSegment1;\u000a    sum1 = sum1 + production1;\u000a}\u000a\u000aFraction = sum/sum1;\u000areturn [v.name, Fraction]')
INSERT INTO SOURCES VALUES(44,'Reserve deployment duration','ElectricitySpotMarket','sum1=0;\u000aprevseg=0;\u000a\u000amarkets = v;\u000a//segID = ppdpss = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==tick}.out(&quot;SEGMENT_DISPATCHPLAN&quot;).sort{it.segmentID}._().segmentID;\u000appdpss = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==tick}.out(&quot;SEGMENT_DISPATCHPLAN&quot;).sort{it.segmentID}._().lengthInHours;\u000asegs = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==tick}.out(&quot;SEGMENT_DISPATCHPLAN&quot;).sort{it.segmentID}._();   \u000a\u000a//return [v.name, segs, ppdpss]\u000a//hoursInSegment1 = ppdpss.next()\u000a\u000a\u000afor (market in markets){\u000a    currentMarket = market;\u000a    for(seg in segs){\u000a        if(seg.segmentID != prevseg &amp;&amp; v==currentMarket){\u000a            sum1=sum1+seg.getProperty(&quot;lengthInHours&quot;)\u000a            prevseg=seg.segmentID\u000a            \u000a        }\u000a        \u000a        \u000a    }\u000a    return[v.name, sum1]\u000a    \u000a}\u000a\u000a\u000a/*for(pppdp in ppdpss){\u000a    //totalAmount1 = pppdp.getProperty(&quot;acceptedAmount&quot;);\u000a    hoursInSegment1 = pppdp.out(&quot;SEGMENT_DISPATCHPLAN&quot;).next().getProperty(&quot;lengthInHours&quot;);\u000a    //production1 = totalAmount1 * hoursInSegment1;\u000a    //sum1 = sum1 + production1;\u000a\u000a*/')
INSERT INTO SOURCES VALUES(45,'A-test','ElectricitySpotMarket','sum1=0;\u000aprevseg=0;\u000a\u000amarkets = v;\u000a//segID = ppdpss = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==3}.out(&quot;SEGMENT_DISPATCHPLAN&quot;).sort{it.segmentID}._().segmentID;\u000appdpss = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==3}.out(&quot;SEGMENT_DISPATCHPLAN&quot;).sort{it.segmentID}._().lengthInHours;\u000asegs = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==3}.out(&quot;SEGMENT_DISPATCHPLAN&quot;).sort{it.segmentID}._();   \u000a\u000a//return [v.name, segs, ppdpss]\u000a//hoursInSegment1 = ppdpss.next()\u000a\u000a\u000afor (market in markets){\u000a    currentMarket = market;\u000a    for(seg in segs){\u000a        if(seg.segmentID != prevseg &amp;&amp; v==currentMarket){\u000a            sum1=sum1+seg.getProperty(&quot;lengthInHours&quot;)\u000a            prevseg=seg.segmentID\u000a            \u000a        }\u000a        \u000a        \u000a    }\u000a    return[v.name, sum1]\u000a    \u000a}\u000a\u000a\u000a/*for(pppdp in ppdpss){\u000a    //totalAmount1 = pppdp.getProperty(&quot;acceptedAmount&quot;);\u000a    hoursInSegment1 = pppdp.out(&quot;SEGMENT_DISPATCHPLAN&quot;).next().getProperty(&quot;lengthInHours&quot;);\u000a    //production1 = totalAmount1 * hoursInSegment1;\u000a    //sum1 = sum1 + production1;\u000a\u000a*/\u000a\u000appdps = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.time==10}.amount;\u000a//time = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10}.time;\u000a[v.name, ppdps]\u000a\u000av.filter{it.type==10 &amp;&amp; it.time==50}.out.name\u000a\u000av.filter{it.type==10 &amp;&amp; it.time==50 &amp;&amp; }.out(&quot;FROM_AGENT&quot;).name\u000a//(&#39;FROM_AGENT&#39;).collect{it.__type__.contains(&#39;StrategicReserveOperator&#39;)}[0]) {\u000an.getNodes(&quot;CashFlow&quot;);\u000ag.idx(&#39;__types__&#39;)[[className:&#39;emlab.gen.domain.gis.Zone&#39;]]\u000av.in(&quot;REGION&quot;).in(&quot;LOCATION&quot;).filter{f.plantIsOperational(it, tick)}.out(&quot;TECHNOLOGY&quot;).sum{it.capacity*(it.peakSegmentDependentAvailability)}')
INSERT INTO SOURCES VALUES(46,'Contracted reserve volume','ElectricitySpotMarket','markets = v\u000a\u000afor (market in markets){\u000a    //ppdpss = market.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.time==1}.count()\u000a    amounts = market.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.time==tick}.amount.sum()\u000a    if (amounts == null){\u000a        amounts=0;\u000a    }\u000a    \u000a    reserve = amounts/20\u000a    return[market.name, reserve]\u000a}')
INSERT INTO SOURCES VALUES(47,'Calculated R volume','StrategicReserveOperator','res=v.reserveVolume\u000azone = v.outE(&quot;SROPERATOR_ZONE&quot;).inV.name\u000a[zone, res]')
INSERT INTO SOURCES VALUES(48,'StrategicReserveOperator Cash Flows','','flows = n.getNodes(&#39;CashFlow&#39;);\u000agroups = flows.groupBy{it.type}\u000aresult = [];\u000atotalCosts = 0;\u000atotalRevenue = 0;\u000atotalSpotRevenue = 0;\u000atotalLTCRevenue = 0;\u000afor (key in groups.keySet()) {\u000a    if (key==10) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;StrategicReserveOperator&#39;)}[0]) {\u000a                totalRevenue += flow.money;\u000a            }\u000a            if (flow.out(&#39;FROM_AGENT&#39;).collect{it.__type__.contains(&#39;StrategicReserveOperator&#39;)}[0]) {\u000a                totalCosts += flow.money;\u000a            }\u000a        }\u000a        }  \u000a    }       \u000a    \u000a\u000a//result.add([&#39;Revenue&#39;, totalRevenue]);\u000aresult.add([&#39;Revenue&#39;, totalRevenue]);\u000aresult.add([&#39;Cost&#39;, totalCosts]);\u000aresult.add([&#39;Profit&#39;, totalRevenue - totalCosts]);\u000areturn [result];')
INSERT INTO SOURCES VALUES(49,'Max Capacity Utilized','ElectricitySpotMarket','//ppdpss = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==11}.acceptedAmount;\u000a//segs = v.inE(&quot;BIDDINGMARKET&quot;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==tick}.out(&quot;SEGMENT_DISPATCHPLAN&quot;);   \u000a//market = v.name\u000a//return[market,segs, ppdpss]\u000acounter=0\u000amarkets = v\u000asegments = v.outE(&#39;SEGMENT_LOAD&#39;).inV.outE(&#39;SEGMENTLOAD_SEGMENT&#39;).inV\u000a\u000a\u000a\u000afor(market in markets){\u000a    for(segment in segments){\u000a        ppdps = segment.inE(&#39;SEGMENT_DISPATCHPLAN&#39;).outV.filter{it.SRstatus&lt;=-10 &amp;&amp; it.status&gt;=2 &amp;&amp; it.time==tick}.sum{it.acceptedAmount}\u000a       if (ppdps &gt; counter){\u000a           counter = ppdps\u000a       }\u000a    }\u000a}\u000a\u000areturn[markets.name, counter]')
INSERT INTO SOURCES VALUES(54,'SR profit flow split','StrategicReserveOperator','cost = v.inE(&#39;FROM_AGENT&#39;).outV.filter{it.time==tick}.sum{it.money}\u000arevenues = v.inE(&#39;TO_AGENT&#39;).outV.filter{it.time==tick}.sum{it.money}\u000azone = v.outE.inV.name\u000aif (revenues == null){\u000a    revenues = 0\u000a}\u000a\u000aif(cost==null){\u000a    cost=0\u000a}\u000a\u000aprofit = revenues - cost\u000a\u000areturn [v.name + &#39; Profits&#39;, profit];')
INSERT INTO SOURCES VALUES(55,'SR cost Split','StrategicReserveOperator','cost = v.inE(&#39;FROM_AGENT&#39;).outV.filter{it.time==tick}.sum{it.money}\u000arevenues = v.inE(&#39;TO_AGENT&#39;).outV.filter{it.time==tick}.sum{it.money}\u000azone = v.outE.inV.name\u000aif (revenues == null){\u000a    revenues = 0\u000a}\u000a\u000a\u000a\u000areturn [v.name + &#39; Costs&#39;, cost];')
INSERT INTO SOURCES VALUES(56,'SR revenue split','StrategicReserveOperator','cost = v.inE(&#39;FROM_AGENT&#39;).outV.filter{it.time==tick}.sum{it.money}\u000arevenues = v.inE(&#39;TO_AGENT&#39;).outV.filter{it.time==tick}.sum{it.money}\u000azone = v.outE.inV.name\u000aif (revenues == null){\u000a    revenues = 0\u000a}\u000a\u000a\u000a\u000areturn [v.name + &#39; Revenue&#39;, revenues];')
INSERT INTO SOURCES VALUES(59,'resCostPerMWh','Zone','cp = v.in(&quot;ZONE&quot;).in(&quot;MARKET_POINT&quot;).filter{it.time==tick}.toList();\u000atargetInvestorName=targetInvestorName=v.in(&quot;ZONE&quot;).in(&#39;INVESTOR_MARKET&#39;).filter{it.__type__==&quot;emlab.gen.domain.agent.TargetInvestor&quot;}.collect{it.name}[0]\u000aflows = n.getNodes(&#39;CashFlow&#39;);\u000agroups = flows.groupBy{it.type}\u000aresult = [];\u000atotalCosts = 0;\u000atotalRevenue = 0;\u000atotalSpotRevenue = 0;\u000atotalLTCRevenue = 0;\u000afor (key in groups.keySet()) {\u000a    if (key&lt;3) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{targetInvestorName==it.name}[0]) {\u000a                totalRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    } else {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;FROM_AGENT&#39;).collect{targetInvestorName==it.name}[0]) {\u000a                totalCosts += flow.money;\u000a            }\u000a        }\u000a    }\u000a       \u000a     if (key==1) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{targetInvestorName==it.name}[0]) {\u000a                totalSpotRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    }\u000a    \u000a     if (key==2) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{targetInvestorName==it.name}[0]) {\u000a                totalLTCRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    }\u000a}\u000a//result.add([&#39;Revenue&#39;, totalRevenue]);\u000aprofit=totalRevenue-totalCosts\u000a[v.name, (-profit) / cp.sum{it.volume}];')
INSERT INTO SOURCES VALUES(60,'PeakAvailableCapacity','Zone','t = new Table();\u000app = v.in(&#39;REGION&#39;).in(&#39;LOCATION&#39;)\u000app.filter{(it.dismantleTime &gt; tick) &amp;&amp; ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) &lt;= tick)}.as(&#39;powerPlantCapacity&#39;).out(&#39;TECHNOLOGY&#39;).as(&#39;peakSegmentDependentAvailability&#39;).table(t){it.actualNominalCapacity}{it.peakSegmentDependentAvailability}.cap().next();\u000acapacitySum = 0; for (row in t){capacitySum += row.getColumn(&#39;powerPlantCapacity&#39;) * row.getColumn(&#39;peakSegmentDependentAvailability&#39;)}\u000areturn [v.name, capacitySum]')
INSERT INTO SOURCES VALUES(61,'CO2AuctionForecast','CO2Auction','point=v.in(&#39;MARKET_POINT&#39;).filter{it.time==tick+3 &amp; it.forecast==true}\u000aif(!point.hasNext()){price = 0} else {price=point.next().getProperty(&#39;price&#39;)}\u000a[&quot;CO2 auction forecast&quot;, price]')
INSERT INTO SOURCES VALUES(62,'Power Price Country A Forecast','','result = [];\u000azones = n.getNodes(&quot;Zone&quot;);\u000afor(zone in zones){\u000a    if(zone.name == &quot;Country A&quot;){\u000a        theones = zone.in.in(&quot;MARKET_POINT&quot;).filter{it.time == tick+3 &amp;&amp; it.forecast==true}\u000a        for(one in theones) {\u000a          result.add([one.out(&quot;SEGMENT_POINT&quot;).segmentID,one.price]);\u000a        }\u000a    }\u000a}\u000areturn result;')
INSERT INTO SOURCES VALUES(63,'Power Price Country B Forecast','','result = [];\u000azones = n.getNodes(&quot;Zone&quot;);\u000afor(zone in zones){\u000a    if(zone.name == &quot;Country B&quot;){\u000a        theones = zone.in.in(&quot;MARKET_POINT&quot;).filter{it.time == tick+3 &amp; it.forecast==true}\u000a        for(one in theones) {\u000a          result.add([one.out(&quot;SEGMENT_POINT&quot;).segmentID,one.price]);\u000a        }\u000a    }\u000a}\u000areturn result;')
INSERT INTO SOURCES VALUES(64,'Forecasted CO2 Emissions','DecarbonizationModel','ppdps=g.idx(&#39;__types__&#39;)[[className:&#39;emlab.gen.domain.market.electricity.PowerPlantDispatchPlan&#39;]].propertyFilter(&#39;time&#39;, FilterPipe.Filter.EQUAL, tick+3).filter{it.status&gt;=1 &amp;&amp; it.forecast==true}.collect();\u000aco2Emissions = 0\u000afor(plan in ppdps){\u000afuelMix=plan.out(&#39;POWERPLANT_DISPATCHPLAN&#39;).out(&#39;FUEL_MIX&#39;).collect()\u000asingleEmission=0\u000a    for(fuelMixElement in fuelMix){\u000a        //fuelMixElement=fuelMix[1]\u000a        share=fuelMixElement.share\u000a        co2Density=fuelMixElement.out(&quot;SUBSTANCE&quot;).collect{it.co2Density}[0]*(1-plan.out(&#39;POWERPLANT_DISPATCHPLAN&#39;).out(&quot;TECHNOLOGY&quot;).collect{it.co2CaptureEffciency}[0])\u000a        singleEmission+=share*co2Density\u000a    }\u000a    co2Emissions+=plan.acceptedAmount*singleEmission*plan.out(&#39;SEGMENT_DISPATCHPLAN&#39;).collect{it.lengthInHours}[0]\u000a}\u000areturn [&#39;Forecasted CO2 emissions&#39;, co2Emissions];')
INSERT INTO SOURCES VALUES(65,'Forecast VWAP','Zone','cp = v.in(&quot;ZONE&quot;).in(&quot;MARKET_POINT&quot;).filter{it.time==tick+3 &amp; it.forecast==true}.toList();\u000a[v.name + &quot; Forecast&quot;, cp.sum{it.price * it.volume} / cp.sum{it.volume}];')
INSERT INTO SOURCES VALUES(66,'BankedAllowances','DecarbonizationModel','agents = g.idx(&#39;__types__&#39;)[[className:&#39;emlab.gen.domain.agent.DecarbonizationAgent&#39;]];\u000a           co2Allowances=0;\u000a           for(agent in agents){if(agent.co2Allowances!=null) co2Allowances+=agent.co2Allowances};\u000areturn [&quot;CO2 Banking&quot;, co2Allowances]')
INSERT INTO SOURCES VALUES(67,'ImportsToA','','result = [];\u000azones = n.getNodes(&quot;Zone&quot;);\u000afor(zone in zones){\u000a    if(zone.name == &quot;Country A&quot;){\u000a        theones = zone.in.in(&quot;MARKET_POINT&quot;).filter{it.time == tick &amp;&amp; it.forecast==false}\u000a        for(one in theones) {\u000a          result.add([one.out(&quot;SEGMENT_POINT&quot;).segmentID,one.interconnectorFlow]);\u000a        }\u000a    }\u000a}\u000areturn result;')
INSERT INTO SOURCES VALUES(69,'MarketStabilityReserve','Government','[&quot;Market Stability Reserv&quot;,v.stabilityReserve]')
INSERT INTO SOURCES VALUES(70,'RevenuesProfitA','BigBank','flows = n.getNodes(&#39;CashFlow&#39;);\u000agroups = flows.groupBy{it.type}\u000aresult = [];\u000atotalCosts = 0;\u000atotalRevenue = 0;\u000atotalSpotRevenue = 0;\u000atotalLTCRevenue = 0;\u000atotalCMRevenue = 0;\u000atotalRESRevenue=0;\u000atotalCO2HedgingRevenue=0;\u000afor (key in groups.keySet()) {\u000a    if (key&lt;3 || key&gt;9) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0] &amp;&amp; flow.out(&#39;TO_AGENT&#39;).out(&#39;INVESTOR_MARKET&#39;).out(&#39;ZONE&#39;).collect{it.name.equals(&#39;Country A&#39;)}[0]) {\u000a                totalRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    } else {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;FROM_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0] &amp;&amp; flow.out(&#39;FROM_AGENT&#39;).out(&#39;INVESTOR_MARKET&#39;).out(&#39;ZONE&#39;).collect{it.name.equals(&#39;Country A&#39;)}[0]) {\u000a                totalCosts += flow.money;\u000a            }\u000a        }\u000a    }\u000a       \u000a     if (key==1) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0] &amp;&amp; flow.out(&#39;TO_AGENT&#39;).out(&#39;INVESTOR_MARKET&#39;).out(&#39;ZONE&#39;).collect{it.name.equals(&#39;Country A&#39;)}[0]) {\u000a                totalSpotRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    }\u000a    \u000a     if (key==2) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0] &amp;&amp; flow.out(&#39;TO_AGENT&#39;).out(&#39;INVESTOR_MARKET&#39;).out(&#39;ZONE&#39;).collect{it.name.equals(&#39;Country A&#39;)}[0]) {\u000a                totalLTCRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    }\u000a    \u000a         if (key==11) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0] &amp;&amp; flow.out(&#39;TO_AGENT&#39;).out(&#39;INVESTOR_MARKET&#39;).out(&#39;ZONE&#39;).collect{it.name.equals(&#39;Country A&#39;)}[0]) {\u000a                totalCMRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    }\u000a    \u000a        \u000a             if (key==10) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0] &amp;&amp; flow.out(&#39;TO_AGENT&#39;).out(&#39;INVESTOR_MARKET&#39;).out(&#39;ZONE&#39;).collect{it.name.equals(&#39;Country A&#39;)}[0]) {\u000a                totalRESRevenue += flow.money;\u000a            }\u000a        }\u000a        \u000a    }\u000a\u000aif (key==12) {\u000a        for (flow in groups[key]) {\u000a            if (flow.time != tick) continue;\u000a            if (flow.out(&#39;TO_AGENT&#39;).collect{it.__type__.contains(&#39;EnergyProducer&#39;)}[0]) {\u000a                totalCO2HedgingRevenue += flow.money;\u000a            }\u000a        }\u000a        }\u000a\u000a}\u000aresult.add([&#39;Total Revenue&#39;, totalRevenue]);\u000aresult.add([&#39;Revenue LTC&#39;, totalLTCRevenue]);\u000aresult.add([&#39;Revenue Spot&#39;, totalSpotRevenue]);\u000aresult.add([&#39;Revenue CM&#39;, totalCMRevenue])\u000aresult.add([&#39;Revenue RES&#39;,totalRESRevenue])\u000aresult.add([&#39;Revenue CO2Hedge&#39;, totalCO2HedgingRevenue]);\u000aresult.add([&#39;Profit&#39;, totalRevenue - totalCosts]);\u000areturn result;')
INSERT INTO SOURCES VALUES(71,'WindNodeInstallations','PowerGridNode','capacity=v.in(&#39;LOCATION&#39;).as(&#39;x&#39;).out(&#39;TECHNOLOGY&#39;).filter{it.name==&#39;Wind&#39;}.back(&#39;x&#39;).sum{it.actualNominalCapacity}\u000aif(capacity == null) capacity = 0\u000a[v.name, capacity]')
INSERT INTO SOURCES VALUES(72,'OriginalCO2Cap','Government','cap=0\u000atry{cap = v.out(&quot;CO2CAP_TREND&quot;).collect{f.getTrendValue(it, tick)}[0];} catch(Exception e){    \u000acap=v.out(&quot;CO2CAP_TREND&quot;).timeSeries.next()[tick.toInteger()];}\u000atry{capReduction = v.out(&quot;CO2CAPADJUSTMENT_TIMESERIES&quot;).timeSeries.next()[tick.toInteger()]} catch(Exception e){\u000a    capReduction=0\u000a}\u000areturn [&quot;Original CO2 cap&quot;, cap+capReduction]')
INSERT INTO VISUALS VALUES(0,'Producer Cash Balance','chart','line','Euro')
INSERT INTO VISUALS VALUES(1,'Producer Revenue','chart','area','EUR')
INSERT INTO VISUALS VALUES(2,'CO2 Cap and Emissions','chart','line','')
INSERT INTO VISUALS VALUES(3,'Power Supply and Demand','chart','line','MW')
INSERT INTO VISUALS VALUES(4,'Average Electricity Prices','chart','line','EUR')
INSERT INTO VISUALS VALUES(5,'Power Generation Portfolio','chart','stacked_area','MW')
INSERT INTO VISUALS VALUES(6,'Producer Costs','chart','stacked_area','EUR')
INSERT INTO VISUALS VALUES(7,'CO2 prices','chart','line','euro/ton')
INSERT INTO VISUALS VALUES(8,'Power prices country A','chart','line','euro/MWh')
INSERT INTO VISUALS VALUES(9,'Power prices country B','chart','line','euro/MWh')
INSERT INTO VISUALS VALUES(10,'Generation Capacity by Owner','chart','stacked_area','MW')
INSERT INTO VISUALS VALUES(11,'Fuel prices','chart','line','euro/GJ')
INSERT INTO VISUALS VALUES(12,'Generation Capacity in Pipeline','chart','line','MW')
INSERT INTO VISUALS VALUES(13,'Pipeline Capacity (Type)','chart','line','MW')
INSERT INTO VISUALS VALUES(14,'Long-term contracts (owner)','chart','stacked_area','MW')
INSERT INTO VISUALS VALUES(15,'Long-term contracts (type)','chart','stacked_area','MW')
INSERT INTO VISUALS VALUES(16,'Long-term contracts (duration)','chart','stacked_area','MW')
INSERT INTO VISUALS VALUES(17,'Long-term contracts (country)','chart','line','MW')
INSERT INTO VISUALS VALUES(18,'PeakPower Generation Portfolio','chart','stacked_area','MW')
INSERT INTO VISUALS VALUES(20,'Production per technology','chart','stacked_area','MWh')
INSERT INTO VISUALS VALUES(21,'Generation Type (per Country)','chart','stacked_area','Capacity (MW)')
INSERT INTO VISUALS VALUES(22,'Production vs Consumption','chart','line','MWh')
INSERT INTO VISUALS VALUES(23,'Shortages in Hours','chart','line','Shortages [h]')
INSERT INTO VISUALS VALUES(24,'Number of Vertices','chart','line','#')
INSERT INTO VISUALS VALUES(25,'Number of Edges','chart','line','#')
INSERT INTO VISUALS VALUES(26,'SR Operator revenue','chart','line','Euro')
INSERT INTO VISUALS VALUES(27,'Annual SR Fraction','chart','line','Fraction of generation')
INSERT INTO VISUALS VALUES(28,'Reserve dispatch duration','chart','line','Hours')
INSERT INTO VISUALS VALUES(29,'Reserve volumes','chart','line','Mw')
INSERT INTO VISUALS VALUES(30,'SR Cashflow','chart','line','Euro')
INSERT INTO VISUALS VALUES(31,'Maximum SR volume dispatched','chart','line','MW')
INSERT INTO VISUALS VALUES(34,'CashFlow SR','chart','line','Euro')
INSERT INTO VISUALS VALUES(35,'Power Price Forecast B','chart','line','Euro/MWh')
INSERT INTO VISUALS VALUES(36,'Power Price Forecast A','chart','line','Euro/MWh')
INSERT INTO VISUALS VALUES(37,'Imports to A (Exports negative)','chart','line','Imports to A [MWh]')
INSERT INTO VISUALS VALUES(38,'Martket Stability Reserve','chart','line','Reserve Volume')
INSERT INTO VISUALS VALUES(40,'Wind Installations in Node','chart','line','Wind Installations in Node [MW]')
INSERT INTO VISUALS_SOURCES VALUES(0,0)
INSERT INTO VISUALS_SOURCES VALUES(1,6)
INSERT INTO VISUALS_SOURCES VALUES(2,5)
INSERT INTO VISUALS_SOURCES VALUES(2,7)
INSERT INTO VISUALS_SOURCES VALUES(2,64)
INSERT INTO VISUALS_SOURCES VALUES(2,66)
INSERT INTO VISUALS_SOURCES VALUES(2,72)
INSERT INTO VISUALS_SOURCES VALUES(3,26)
INSERT INTO VISUALS_SOURCES VALUES(3,60)
INSERT INTO VISUALS_SOURCES VALUES(4,2)
INSERT INTO VISUALS_SOURCES VALUES(4,65)
INSERT INTO VISUALS_SOURCES VALUES(5,3)
INSERT INTO VISUALS_SOURCES VALUES(6,9)
INSERT INTO VISUALS_SOURCES VALUES(7,4)
INSERT INTO VISUALS_SOURCES VALUES(7,10)
INSERT INTO VISUALS_SOURCES VALUES(7,11)
INSERT INTO VISUALS_SOURCES VALUES(7,30)
INSERT INTO VISUALS_SOURCES VALUES(7,61)
INSERT INTO VISUALS_SOURCES VALUES(8,12)
INSERT INTO VISUALS_SOURCES VALUES(9,13)
INSERT INTO VISUALS_SOURCES VALUES(10,14)
INSERT INTO VISUALS_SOURCES VALUES(11,15)
INSERT INTO VISUALS_SOURCES VALUES(12,17)
INSERT INTO VISUALS_SOURCES VALUES(13,18)
INSERT INTO VISUALS_SOURCES VALUES(14,20)
INSERT INTO VISUALS_SOURCES VALUES(15,21)
INSERT INTO VISUALS_SOURCES VALUES(16,22)
INSERT INTO VISUALS_SOURCES VALUES(17,23)
INSERT INTO VISUALS_SOURCES VALUES(18,25)
INSERT INTO VISUALS_SOURCES VALUES(20,34)
INSERT INTO VISUALS_SOURCES VALUES(21,31)
INSERT INTO VISUALS_SOURCES VALUES(21,32)
INSERT INTO VISUALS_SOURCES VALUES(22,29)
INSERT INTO VISUALS_SOURCES VALUES(22,33)
INSERT INTO VISUALS_SOURCES VALUES(23,29)
INSERT INTO VISUALS_SOURCES VALUES(24,37)
INSERT INTO VISUALS_SOURCES VALUES(25,38)
INSERT INTO VISUALS_SOURCES VALUES(26,42)
INSERT INTO VISUALS_SOURCES VALUES(27,43)
INSERT INTO VISUALS_SOURCES VALUES(28,44)
INSERT INTO VISUALS_SOURCES VALUES(29,46)
INSERT INTO VISUALS_SOURCES VALUES(29,47)
INSERT INTO VISUALS_SOURCES VALUES(30,48)
INSERT INTO VISUALS_SOURCES VALUES(31,49)
INSERT INTO VISUALS_SOURCES VALUES(34,54)
INSERT INTO VISUALS_SOURCES VALUES(34,55)
INSERT INTO VISUALS_SOURCES VALUES(34,56)
INSERT INTO VISUALS_SOURCES VALUES(35,63)
INSERT INTO VISUALS_SOURCES VALUES(36,62)
INSERT INTO VISUALS_SOURCES VALUES(37,67)
INSERT INTO VISUALS_SOURCES VALUES(38,69)
INSERT INTO VISUALS_SOURCES VALUES(40,71)
