"CapacityinMW", "PowerGeneratingTechnology", "capacity= v.in().filter{(it.dismantleTime > tick) && ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick)}.sum{it.actualNominalCapacity}
if(capacity == null) capacity = 0
[v.name, capacity]",

"CapacityinMWinA", "PowerGeneratingTechnology", "capacity = v.in('TECHNOLOGY').as('x').out('LOCATION').out('REGION').filter{it.name=='Country A'}.back('x').filter{(it.dismantleTime > tick) && ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick)}.sum{it.actualNominalCapacity}
if(capacity == null) capacity = 0
[v.name, capacity]",

"CapacityinMWinB", "PowerGeneratingTechnology", "capacity = v.in('TECHNOLOGY').as('x').out('LOCATION').out('REGION').filter{it.name=='Country B'}.back('x').filter{(it.dismantleTime > tick) && ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick)}.sum{it.actualNominalCapacity}
if(capacity == null) capacity = 0
[v.name, capacity]",

"PeakDemandPerZoneInMW", "ElectricitySpotMarket", "topsegments = v.out('SEGMENT_LOAD').max{it.baseLoad}.baseLoad;
growthfactors = v.out('DEMANDGROWTH_TREND').collect{f.getTrendValue(it, tick)}[0];
adjustedTopSegments = topsegments*growthfactors;
return [v.outE('ZONE').inV.collect{it.name}[0], adjustedTopSegments]",

"TotalOperationalCapacityPerZoneInMW", "Zone", "[v.name + '_Capacity', v.in('REGION').in('LOCATION').filter{f.plantIsOperational(it, tick)}.out('TECHNOLOGY').sum{it.capacity*(it.peakSegmentDependentAvailability)}]",

"TotalConsumptioninMWh", "DecarbonizationModel", "segmentloads = g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.SegmentLoad']];
productionsum  = 0;
for(segmentload in segmentloads){
    //productionsum += segmentload.baseLoad;
    growthfactor = segmentload.in('SEGMENT_LOAD').out('DEMANDGROWTH_TREND').collect{f.getTrendValue(it, tick)}[0];
    productionsum += segmentload.out('SEGMENTLOAD_SEGMENT').lengthInHours.next() * segmentload.baseLoad * growthfactor;
}
return [['Total_ConsumptioninMWh', productionsum]];",

"TotalProductioninMWh", "DecarbonizationModel", "powerplants = g.idx('__types__')[[className:'emlab.gen.domain.technology.PowerPlant']]
return [['Total Production', powerplants.in('POWERPLANT_DISPATCHPLAN').sum{f.determineProductionOfDispatchPlanInMWh(it, tick)}]]",

"CO2CapinTonpA", "Government", "cap = v.out('CO2CAP_TREND').collect{f.getTrendValue(it, tick)}[0];
return ['CO2_cap', cap]",

"NationalMinCO2PriceinEURpTon", "NationalGovernment","price = v.out('MINCO2PRICE_TREND').collect{f.getTrendValue(it, tick)}[0];
return [v.out('GOVERNED_ZONE').collect{it.name}[0], price];",

"GenerationinMWh", "PowerGeneratingTechnology", "sum = 0;
ppdps = v.in('TECHNOLOGY').in('POWERPLANT_DISPATCHPLAN').filter{it.time==tick && it.status>=2};
for(ppdp in ppdps){
    totalAmount = ppdp.getProperty('acceptedAmount') + ppdp.getProperty('capacityLongTermContract');
    hoursInSegment = ppdp.out('SEGMENT_DISPATCHPLAN').next().getProperty('lengthInHours');
    production = totalAmount * hoursInSegment;
    sum = sum + production;
}
return [v.name, sum]",
    
"CO2Auction", "CO2Auction", "point=v.in('MARKET_POINT').filter{it.time==tick}
if(!point.hasNext()){price = 0} else {price=point.next().getProperty('price')}
return price",

"Avg_El_PricesinEURpMWh", "Zone", "
cp = v.in('ZONE').in('MARKET_POINT').filter{it.time==tick}.toList();
[v.name, cp.sum{it.price * it.volume} / cp.sum{it.volume}];
",

"CO2Emissions_inTonpA", "DecarbonizationModel", "ppdps=g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.PowerPlantDispatchPlan']].propertyFilter('time', FilterPipe.Filter.EQUAL, tick).filter{it.status>=1}.collect();
co2Emissions = 0
for(plan in ppdps){
fuelMix=plan.out('POWERPLANT_DISPATCHPLAN').out('FUEL_MIX').collect()
singleEmission=0
    for(fuelMixElement in fuelMix){
        //fuelMixElement=fuelMix[1]
        share=fuelMixElement.share
        co2Density=fuelMixElement.out("SUBSTANCE").collect{it.co2Density}[0]*(1-plan.out('POWERPLANT_DISPATCHPLAN').out("TECHNOLOGY").collect{it.co2CaptureEffciency}[0])
        singleEmission+=share*co2Density
    }
    co2Emissions+=plan.acceptedAmount*singleEmission*plan.out('SEGMENT_DISPATCHPLAN').collect{it.lengthInHours}[0]
}
return co2Emissions",

"EUCO2PriceFloor", "Government", "price = v.out('MINCO2PRICE_TREND').collect{f.getTrendValue(it, tick)}[0];
return ['EU CO2 price floor', price];",

"CO2Tax", "Government", "price = v.out('CO2TAX_TREND').collect{f.getTrendValue(it, tick)}[0];
return price",

"FuelPricesPerGJ", "DecarbonizationModel", "fuels = g.idx('__types__')[[className:'emlab.gen.domain.technology.Substance']].filter{it.name != 'Electricity' && it.name != 'CO2'}
result = []
for(v in fuels){
      price = v.in('SUBSTANCE_MARKET').in('MARKET_POINT').filter{it.time == tick}.collect{it.price};
      density = v.energyDensity;
      inGJ = price[0] / density;
      result.add([v.name,inGJ]);}
      return result",

"ProducerCash", "EnergyProducer", "[v.name, v.cash]",

"AggregateFinances", "DecarbonizationModel", "flows = n.getNodes('CashFlow');
groups = flows.groupBy{it.type}
result = [];
totalCosts = 0;
totalRevenue = 0;
totalSpotRevenue = 0;
totalLTCRevenue = 0;
for (key in groups.keySet()) {
    if (key<3) {
        for (flow in groups[key]) {
            if (flow.time != tick) continue;
            if (flow.out('TO_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
                totalRevenue += flow.money;
            }
        }
        
    } else {
        for (flow in groups[key]) {
            if (flow.time != tick) continue;
            if (flow.out('FROM_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
                totalCosts += flow.money;
            }
        }
    }
       
     if (key==1) {
        for (flow in groups[key]) {
            if (flow.time != tick) continue;
            if (flow.out('TO_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
                totalSpotRevenue += flow.money;
            }
        }
        
    }
    
     if (key==2) {
        for (flow in groups[key]) {
            if (flow.time != tick) continue;
            if (flow.out('TO_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
                totalLTCRevenue += flow.money;
            }
        }
        
    }
}
//result.add(['Revenue', totalRevenue]);
result.add(['Revenue LTC', totalLTCRevenue]);
result.add(['Revenue Spot', totalSpotRevenue]);
result.add(['Profit', totalRevenue - totalCosts]);
return result;",

"PriceInEURperMWh", "DecarbonizationModel", "results = []
points = g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.SegmentClearingPoint']].propertyFilter('time', FilterPipe.Filter.EQUAL, tick)
for(scp in points){
    results.add(["Segment " + scp.out("MARKET_POINT").out("ZONE").name.next() + " " + scp.out("SEGMENT_POINT").segmentID.next(), scp.price])
}
return results",

"ShortagesInHoursUnserved", "DecarbonizationModel", "powerplants = g.idx('__types__')[[className:'emlab.gen.domain.technology.PowerPlant']].filter{(it.dismantleTime > tick) && ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick)}
production= powerplants.in('POWERPLANT_DISPATCHPLAN').sum{f.determineProductionOfDispatchPlanInMWh(it, tick)};
segmentloads = g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.SegmentLoad']]
productionsum  = 0;
for(segmentload in segmentloads){
    growthfactor = segmentload.in('SEGMENT_LOAD').out('DEMANDGROWTH_TREND').collect{f.getTrendValue(it, tick)}[0];
    productionsum += segmentload.out('SEGMENTLOAD_SEGMENT').lengthInHours.next() * segmentload.baseLoad * growthfactor;
}
return (production-productionsum)/productionsum*8760;",

"ProducerCosts", "DecarbonizationModel", "flows = n.getNodes('CashFlow');
groups = flows.groupBy{it.type}
result = [];
unusedKeys = []
for(i in 0..9)
    unusedKeys.add(i)
usedKeys=[]
for (key in groups.keySet()) {
    usedKeys.add(key)
    sum = 0;
    for (flow in groups[key]) {
        if (flow.time != tick) continue;
        if (flow.out('FROM_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
            sum += flow.money;
        }
    }
    name='Unspecified';
    if(key==0){name='Unclassified';}
    if(key==1){name='Electricity spot';}
    if(key==2){name='Electricity ltc';}
    if(key==3){name='Fixed O&M';}
    if(key==4){name='Commodity';}
    if(key==5){name='CO2 tax';}
    if(key==6){name='CO2 auction';}
    if(key==7){name='Loan';}
    if(key==8){name='Downpayment';}
    if(key==9){name='National CO2 MinPrice';}
    result.add([name, sum]);
}
    unusedKeys.removeAll(usedKeys)
for(key in unusedKeys){
    name='Unspecified';
    if(key==0){name='Unclassified';}
    if(key==1){name='Electricity spot';}
    if(key==2){name='Electricity ltc';}
    if(key==3){name='Fixed O&M';}
    if(key==4){name='Commodity';}
    if(key==5){name='CO2 tax';}
    if(key==6){name='CO2 auction';}
    if(key==7){name='Loan';}
    if(key==8){name='Downpayment';}
    if(key==9){name='National CO2 MinPrice';}
    result.add([name, 0]);
}
return result;",

"TABLE_PowerPlantDispatchPlans", "DecarbonizationModel", "ppdps=g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.PowerPlantDispatchPlan']].filter{it.time==tick};
            finalResult = [];
            columnNames=['tick','bidder', 'market','volume', 'price', 'bidWithoutCO2', 'technology', 'status', 'segmentID']
            commodities=g.idx('__types__')[[className:'emlab.gen.domain.market.CommodityMarket']].out('SUBSTANCE_MARKET').sort{it.name}.toList();
            for(c in commodities) columnNames.add(c.name)
            finalResult.add(columnNames)
            for(v in ppdps){
            result=[];
            tick=v.time; bidWithoutCO2=v.bidWithoutCO2; volume=v.amount; technology=v.out('POWERPLANT_DISPATCHPLAN').out('TECHNOLOGY').collect{it.name}[0]; status=v.status;
            price=v.price;
            segment=v.out('SEGMENT_DISPATCHPLAN').collect{it}[0];
            bidder=v.in('BIDDER').collect{it.name}[0];
            market=v.out('BIDDINGMARKET').collect{it.name}[0];
            segmentID=segment.segmentID;
            tempResult=[tick,bidder,market,volume, price, bidWithoutCO2, technology, status, segmentID]
            for (c in commodities) tempResult.add(0)
            fuelMix=v.out('POWERPLANT_DISPATCHPLAN').out('FUEL_MIX');
            for(element in fuelMix){
            substanceName=element.out('SUBSTANCE').collect{it.name}[0];
            index = columnNames.findIndexOf{it == substanceName}
            share=element.share;
            tempResult[index]=share
            //return result
            }
            finalResult.add(tempResult);
            }
            return finalResult;",

"TABLE_SegmentClearingPoints", "DecarbonizationModel", "points = g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.SegmentClearingPoint']].propertyFilter('time', FilterPipe.Filter.EQUAL, tick)
finalResult = []
headers=['tick','volume','price','market','segmentID','segmentLength']
finalResult.add(headers)
for(v in points){
    finalResult.add([v.time, v.volume, v.price, v.out('MARKET_POINT').collect{it.name}[0], v.out('SEGMENT_POINT').collect{it.segmentID}[0], v.out('SEGMENT_POINT').collect{it.lengthInHours}[0]])
}
return finalResult;
",

"TABLE_DemandLevels", "DecarbonizationModel", "segmentLoads=ppdps=g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.SegmentLoad']];
finalResult = [];
columnNames=['tick', 'volume', 'market', 'segmentID', 'hours']
finalResult.add(columnNames)
for(s in segmentLoads){
market= s.in('SEGMENT_LOAD').collect{it.name}[0]
growthfactor = s.in('SEGMENT_LOAD').out('DEMANDGROWTH_TREND').collect{f.getTrendValue(it, tick)}[0]
segmentID=s.out('SEGMENTLOAD_SEGMENT').collect{it.segmentID}[0]
hours=s.out('SEGMENTLOAD_SEGMENT').collect{it.lengthInHours}[0]
finalResult.add([tick, s.baseLoad*growthfactor, market, segmentID, hours])
}
return finalResult",

"TABLE_ClearingPoints", "DecarbonizationModel", "points = g.idx('__types__')[[className:'emlab.gen.domain.market.ClearingPoint']].propertyFilter('time', FilterPipe.Filter.EQUAL, tick)
finalResult = []
headers=['tick','volume','price',',market']
finalResult.add(headers)
for(v in points){
finalResult.add([v.time, v.volume, v.price, v.out('MARKET_POINT').collect{it.name}[0]])
}
return finalResult",

