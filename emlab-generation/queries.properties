"CapacityinMW", "PowerGeneratingTechnology", "[v.name, v.in().filter{(it.dismantleTime > tick) && ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick)}.sum{it.actualNominalCapacity}]",

"CapacityinMWinA", "PowerGeneratingTechnology", "capacity = v.in('TECHNOLOGY').as('x').out('LOCATION').out('REGION').filter{it.name=='Country A'}.back('x').filter{(it.dismantleTime > tick) && ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick)}.sum{it.actualNominalCapacity}
if(capacity == null) capacity = 0
[v.name, capacity]",

"CapacityinMWinB", "PowerGeneratingTechnology", "capacity = v.in('TECHNOLOGY').as('x').out('LOCATION').out('REGION').filter{it.name=='Country B'}.back('x').filter{(it.dismantleTime > tick) && ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick)}.sum{it.actualNominalCapacity}
if(capacity == null) capacity = 0
[v.name, capacity]",

"PeakDemandPerZoneInMW", "ElectricitySpotMarket", "topsegments = v.out('SEGMENT_LOAD').max{it.baseLoad}.baseLoad;
growthfactors = v.out('DEMANDGROWTH_TREND').collect{f.getTrendValue(it, tick)}[0];
adjustedTopSegments = topsegments*growthfactors;
return[v.outE('ZONE').inV.collect{it.name + '_Peak_Demand'}, adjustedTopSegments]",

"TotalOperationalCapacityPerZoneInMW", "Zone", "[v.name + '_Capacity', v.in('REGION').in('LOCATION').filter{f.plantIsOperational(it, tick)}.out('TECHNOLOGY').sum{it.capacity*(it.peakSegmentDependentAvailability)}]",

"TotalConsumptioninMWh", "", "segmentloads = g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.SegmentLoad']];
productionsum  = 0;
for(segmentload in segmentloads){
    //productionsum += segmentload.baseLoad;
    growthfactor = segmentload.in('SEGMENT_LOAD').out('DEMANDGROWTH_TREND').collect{f.getTrendValue(it, tick)}[0];
    productionsum += segmentload.out('SEGMENTLOAD_SEGMENT').lengthInHours.next() * segmentload.baseLoad * growthfactor;
}
return [['Total_ConsumptioninMWh', productionsum]];",

"TotalProductioninMWh", "", "powerplants = g.idx('__types__')[[className:'emlab.gen.domain.technology.PowerPlant']]
return [['Total Production', powerplants.in('POWERPLANT_DISPATCHPLAN').sum{f.determineProductionOfDispatchPlanInMWh(it, tick)}]]",

"CO2CapinTonpA", "Government", "cap = v.out('CO2CAP_TREND').collect{f.getTrendValue(it, tick)}[0];
return ['CO2_cap', cap]",

"NationalMinCO2PriceinEURpTon", "NationalGovernment","price = v.out('MINCO2PRICE_TREND').collect{f.getTrendValue(it, tick)}[0];
return ['CO2 price floor in ' + v.out('GOVERNED_ZONE').collect{it.name}, price];",

"GenerationinMWh", "PowerGeneratingTechnology", "sum = 0;
ppdps = v.in('TECHNOLOGY').in('POWERPLANT_DISPATCHPLAN').filter{it.time==tick && it.status>=2};
for(ppdp in ppdps){
    totalAmount = ppdp.getProperty('acceptedAmount') + ppdp.getProperty('capacityLongTermContract');
    hoursInSegment = ppdp.out('SEGMENT_DISPATCHPLAN').next().getProperty('lengthInHours');
    production = totalAmount * hoursInSegment;
    sum = sum + production;
}
return [v.name, sum]",

"CO2Auction", "CO2Auction", "['PriceInEUR', v.in('MARKET_POINT').filter{it.time==tick}.next().getProperty('price')]",

"Avg_El_PricesinEURpMWh", "Zone", "
cp = v.in('ZONE').in('MARKET_POINT').filter{it.time==tick}.toList();
[v.name, cp.sum{it.price * it.volume} / cp.sum{it.volume}];
",

"CO2Emissions_inTonpA", "", "plants = g.idx('__types__')[[className:'emlab.gen.domain.technology.PowerPlant']].filter{((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick) && (it.dismantleTime > tick)};
emissions = plants.collect{f.calculateCO2Emissions(it, tick)}.sum();
return ['CO2_emissions', emissions];",

"CO2Tax", "Government", "price = v.out('MINCO2PRICE_TREND').collect{f.getTrendValue(it, tick)}[0];
return ['EU CO2 price floor', price];",

"FuelPricesPerGJ", "Substance", "if(v.name != 'Electricity' && v.name != 'CO2'){
      price = v.in('SUBSTANCE_MARKET').in('MARKET_POINT').filter{it.time == tick}.collect{it.price};
      density = v.energyDensity;
      inGJ = price[0] / density;
      return [v.name,inGJ];}",

"ProducerCash", "EnergyProducer", "[v.name, v.cash]",

"AggregateFinances", "", "flows = n.getNodes('CashFlow');
groups = flows.groupBy{it.type}
result = [];
totalCosts = 0;
totalRevenue = 0;
totalSpotRevenue = 0;
totalLTCRevenue = 0;
for (key in groups.keySet()) {
    if (key<3) {
        for (flow in groups[key]) {
            if (flow.time != tick) continue;
            if (flow.out('TO_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
                totalRevenue += flow.money;
            }
        }
        
    } else {
        for (flow in groups[key]) {
            if (flow.time != tick) continue;
            if (flow.out('FROM_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
                totalCosts += flow.money;
            }
        }
    }
       
     if (key==1) {
        for (flow in groups[key]) {
            if (flow.time != tick) continue;
            if (flow.out('TO_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
                totalSpotRevenue += flow.money;
            }
        }
        
    }
    
     if (key==2) {
        for (flow in groups[key]) {
            if (flow.time != tick) continue;
            if (flow.out('TO_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
                totalLTCRevenue += flow.money;
            }
        }
        
    }
}
//result.add(['Revenue', totalRevenue]);
result.add(['Revenue LTC', totalLTCRevenue]);
result.add(['Revenue Spot', totalSpotRevenue]);
result.add(['Profit', totalRevenue - totalCosts]);
return result;",

"PowerPlantDispatchPlans", "", "ppdps=g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.PowerPlantDispatchPlan']].filter{it.time==tick};
finalResult = [];
for(v in ppdps){
result=[];
time=v.time; bidWithoutCO2=v.bidWithoutCO2; amount=v.amount; technology=v.out('POWERPLANT_DISPATCHPLAN').out('TECHNOLOGY').name; status=v.status;
segment=v.out('SEGMENT_DISPATCHPLAN');
segmentID=segment.segmentID;
result.add(['time', time]);
result.add(['amount', amount]);
result.add(['technology', technology]);
result.add(['status', status]);
result.add(['segmentID', segmentID]);
fuelMix=v.out('POWERPLANT_DISPATCHPLAN').out('FUEL_MIX');
for(element in fuelMix){
    substanceName=element.out('SUBSTANCE').name;
    share=element.share;
    result.add([substanceName, share]);
}
finalResult.add(result);
}
return finalResult;",

"PriceInEURperMWh", "", "results = []
points = g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.SegmentClearingPoint']].propertyFilter('time', FilterPipe.Filter.EQUAL, tick)
for(scp in points){
    results.add(["Segment " + scp.out("MARKET_POINT").out("ZONE").name.next() + " " + scp.out("SEGMENT_POINT").segmentID.next(), scp.price])
}
return results",

"ShortagesInHoursUnserved", "", "powerplants = g.idx('__types__')[[className:'emlab.gen.domain.technology.PowerPlant']].filter{(it.dismantleTime > tick) && ((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) <= tick)}
production= powerplants.in('POWERPLANT_DISPATCHPLAN').sum{f.determineProductionOfDispatchPlanInMWh(it, tick)};
segmentloads = g.idx('__types__')[[className:'emlab.gen.domain.market.electricity.SegmentLoad']]
productionsum  = 0;
for(segmentload in segmentloads){
    growthfactor = segmentload.in('SEGMENT_LOAD').out('DEMANDGROWTH_TREND').collect{f.getTrendValue(it, tick)}[0];
    productionsum += segmentload.out('SEGMENTLOAD_SEGMENT').lengthInHours.next() * segmentload.baseLoad * growthfactor;
}
return [['ShortagesinAverageHours', (production-productionsum)/productionsum*8760 ]];",

"ProducerCosts", "", "flows = n.getNodes('CashFlow');
groups = flows.groupBy{it.type}
result = [];
for (key in groups.keySet()) {
    sum = 0;
    for (flow in groups[key]) {
        if (flow.time != tick) continue;
        if (flow.out('FROM_AGENT').collect{it.__type__.contains('EnergyProducer')}[0]) {
            sum += flow.money;
        }
    }
    name='Unspecified';
    if(key==0){name='Unclassified';}
    if(key==1){name='Electricity spot';}
    if(key==2){name='Electricity ltc';}
    if(key==3){name='Fixed O&M';}
    if(key==4){name='Commodity';}
    if(key==5){name='CO2 tax';}
    if(key==6){name='CO2 auction';}
    if(key==7){name='Loan';}
    if(key==8){name='Downpayment';}
    if(key==9){name='National CO2 MinPrice';}
    result.add([name, sum]);
}
return result;",




